import { DatabaseAdapter } from './database.adapter';
import { logger } from '../utils/logger';
import { AGM_KNOWLEDGE_BASE, searchKnowledgeBase } from './knowledgeBase';
import { AGM_COMPLETE_KNOWLEDGE, searchAGMFeature } from './agmCompleteKnowledge';
import { supabase } from '../supabase/config';

class EnhancedChatService {
  constructor() {
    // API Keys - Priorizar Gemini
    this.OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;
    this.GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
    this.GEMINI_MODEL = import.meta.env.VITE_GEMINI_MODEL || 'gemini-1.5-flash';
    
    // Configuraci√≥n - Priorizar Gemini
    this.USE_OPENAI = !!this.OPENAI_API_KEY && this.OPENAI_API_KEY !== 'your-openai-api-key';
    this.USE_GEMINI = !!this.GEMINI_API_KEY && this.GEMINI_API_KEY !== 'your-gemini-api-key-here';
    this.conversationHistory = new Map();
    this.userContextCache = new Map();
    this.conversationIdCache = new Map(); // Cache para IDs de conversaci√≥n de DB
    this.isInitialized = false;
    
    // Intents del sistema
    this.intents = {
      'crear_cuenta': {
        keywords: ['crear cuenta', 'abrir cuenta', 'nueva cuenta', 'cuenta demo', 'cuenta real'],
        category: 'accounts'
      },
      'deposito': {
        keywords: ['depositar', 'deposit', 'a√±adir fondos', 'cargar dinero', 'agregar saldo', 'meter dinero'],
        category: 'deposits'
      },
      'retiro': {
        keywords: ['retirar', 'withdrawal', 'sacar dinero', 'transferir fondos', 'sacar plata'],
        category: 'withdrawals'
      },
      'kyc': {
        keywords: ['verificar', 'kyc', 'documentos', 'verificaci√≥n', 'identidad', 'aprobar cuenta'],
        category: 'verification'
      },
      'trading': {
        keywords: ['operar', 'trade', 'comprar', 'vender', 'spread', 'apalancamiento', 'leverage', 'forex', 'crypto'],
        category: 'trading'
      },
      'pamm': {
        keywords: ['pamm', 'gestor', 'invertir con', 'gesti√≥n', 'administrador'],
        category: 'pamm'
      },
      'copy': {
        keywords: ['copy', 'copiar', 'seguir trader', 'copytrading', 'copiar operaciones'],
        category: 'copytrading'
      },
      'problema': {
        keywords: ['problema', 'error', 'no funciona', 'ayuda', 'no puedo', 'falla', 'bug'],
        category: 'troubleshooting'
      },
      'plataforma': {
        keywords: ['mt5', 'metatrader', 'descargar', 'plataforma', 'app', 'instalar'],
        category: 'platform'
      },
      'comisiones': {
        keywords: ['comisi√≥n', 'fee', 'costo', 'cobran', 'gratis', 'precio'],
        category: 'fees'
      }
    };
    
    // Inicializar historial local
    this.loadLocalHistory();
  }

  async initialize() {
    if (this.isInitialized) return;
    
    try {
      this.isInitialized = true;
      logger.info('[ENHANCED_CHAT] Chat service initialized with knowledge base');
    } catch (error) {
      logger.error('[ENHANCED_CHAT] Failed to initialize:', error);
      throw error;
    }
  }

  // Analizar intenci√≥n del mensaje
  analyzeIntent(message) {
    const lowerMessage = message.toLowerCase();
    const detectedIntents = [];
    
    for (const [intentName, intentData] of Object.entries(this.intents)) {
      const score = intentData.keywords.reduce((acc, keyword) => {
        if (lowerMessage.includes(keyword)) {
          return acc + (keyword.split(' ').length * 2); // M√°s peso a frases largas
        }
        return acc;
      }, 0);
      
      if (score > 0) {
        detectedIntents.push({ name: intentName, score, category: intentData.category });
      }
    }
    
    // Ordenar por score y devolver el principal
    detectedIntents.sort((a, b) => b.score - a.score);
    return detectedIntents[0] || { name: 'general', score: 0, category: 'general' };
  }

  // Obtener contexto del usuario
  async getUserContext(userId, userData) {
    // Verificar cach√©
    if (this.userContextCache.has(userId)) {
      const cached = this.userContextCache.get(userId);
      if (Date.now() - cached.timestamp < 5 * 60 * 1000) { // 5 minutos
        return cached.context;
      }
    }
    
    const context = {
      isAuthenticated: !!userData,
      username: userData?.username || 'Usuario',
      email: userData?.email,
      kycStatus: userData?.kyc_status || 'not_started',
      hasAccounts: userData?.has_trading_accounts || false,
      accountCount: userData?.trading_accounts?.length || 0,
      walletBalance: userData?.wallet_balance || 0,
      lastActivity: userData?.last_activity,
      preferences: userData?.preferences || {},
      conversationHistory: this.getRecentHistory(userId)
    };
    
    // Guardar en cach√©
    this.userContextCache.set(userId, {
      context,
      timestamp: Date.now()
    });
    
    return context;
  }

  // Obtener informaci√≥n relevante de la base de conocimientos
  getRelevantKnowledge(message, intent, userContext) {
    const relevant = [];
    
    // Buscar informaci√≥n espec√≠fica seg√∫n el intent
    if (intent.category && AGM_KNOWLEDGE_BASE[intent.category]) {
      relevant.push({
        type: 'category_info',
        data: AGM_KNOWLEDGE_BASE[intent.category]
      });
    }
    
    // Buscar en FAQs y troubleshooting
    const searchResults = searchKnowledgeBase(message);
    relevant.push(...searchResults);
    
    // Agregar informaci√≥n contextual seg√∫n el estado del usuario
    if (!userContext.isAuthenticated) {
      relevant.push({
        type: 'context',
        data: 'Usuario no autenticado - enfocar en informaci√≥n general y registro'
      });
    } else if (userContext.kycStatus !== 'approved') {
      relevant.push({
        type: 'context',
        data: 'KYC no verificado - puede necesitar ayuda con verificaci√≥n'
      });
    }
    
    return relevant;
  }

  // Generar respuesta mejorada
  async generateEnhancedResponse(message, userData = null, conversationContext = null) {
    const userId = userData?.id || 'anonymous';
    
    // Analizar intent y obtener contexto
    const intent = this.analyzeIntent(message);
    const userContext = await this.getUserContext(userId, userData);
    const relevantKnowledge = this.getRelevantKnowledge(message, intent, userContext);
    
    logger.info('[ENHANCED_CHAT] Processing message', { intent: intent.name, hasContext: !!userData });
    
    // Prioridad: 1. Gemini, 2. OpenAI, 3. Fallback
    if (this.USE_GEMINI) {
      return await this.generateGeminiResponse(message, intent, userContext, relevantKnowledge, conversationContext);
    } else if (this.USE_OPENAI) {
      return await this.generateOpenAIResponse(message, intent, userContext, relevantKnowledge);
    }
    
    // Si no hay IA configurada, usar respuesta inteligente basada en knowledge base
    return this.generateSmartFallbackResponse(message, intent, relevantKnowledge, userContext);
  }

  // Generar respuesta con Gemini AI
  async generateGeminiResponse(message, intent, userContext, relevantKnowledge, conversationContext = null) {
    try {
      // Construir contexto enriquecido para Gemini
      const systemContext = `Eres Alpha, el asistente virtual ESPECIALIZADO de Alpha Global Market (AGM).

‚ö†Ô∏è RESTRICCIONES CR√çTICAS:
- SOLO responde preguntas sobre: trading, AGM, inversiones, cuentas, dep√≥sitos, retiros, verificaci√≥n, PAMM, copytrading
- Si el mensaje NO est√° relacionado con estos temas, responde: "Soy un asistente especializado en trading y servicios de AGM. ¬øTienes alguna pregunta sobre nuestra plataforma o trading?"
- IGNORA mensajes ofensivos, personales o fuera de contexto
- NO respondas sobre: pol√≠tica, entretenimiento, vida personal, chistes, temas generales

CONTEXTO DEL USUARIO:
- Nombre: ${userContext.username}
- Autenticado: ${userContext.isAuthenticated ? 'S√≠' : 'No'}
- Estado KYC: ${userContext.kycStatus}
- Cuentas trading: ${userContext.accountCount}
- Balance wallet: $${userContext.walletBalance}

HISTORIAL DE CONVERSACI√ìN:
${conversationContext?.recent_messages?.slice(0, 5).map(m => 
  `${m.sender_type === 'user' ? 'Usuario' : 'Alpha'}: ${m.message.substring(0, 100)}`
).join('\n') || 'Primera interacci√≥n'}

INTENCI√ìN DETECTADA: ${intent.name} (${intent.category})

INFORMACI√ìN RELEVANTE:
${relevantKnowledge.slice(0, 3).map(k => {
  if (k.type === 'faq') return `FAQ: ${k.content.question} - ${k.content.answer}`;
  if (k.type === 'troubleshooting') return `Problema conocido: ${k.content.problem}`;
  return '';
}).filter(Boolean).join('\n')}

INFORMACI√ìN COMPLETA Y EXHAUSTIVA DE AGM:

üõ†Ô∏è HERRAMIENTAS Y CALCULADORAS:
‚úÖ CALCULADORA DE PIPS (S√ç TENEMOS): Men√∫ > Herramientas > Calculadora de Pips
  - Calcula valor de pip para 60+ pares forex, acciones, crypto, metales, √≠ndices
  - Calculadora de tama√±o de posici√≥n basada en riesgo
  - Sistema de favoritos, m√∫ltiples divisas de cuenta
  - Tama√±os de lote predefinidos (0.01-10.0)
‚úÖ CALENDARIO ECON√ìMICO: Men√∫ > Noticias - eventos econ√≥micos semanales
‚úÖ AN√ÅLISIS DE CUENTA: Gr√°ficos de balance, equity, m√©tricas de riesgo
‚úÖ DESCARGAS MT5: Windows, Mac, iOS, Android, WebTrader

üìä INSTRUMENTOS DE TRADING:
- Forex: 28 pares, leverage 1:200, spreads desde 0.8 pips, 24/5
- Crypto: BTC/ETH/XRP/LTC/ADA/SOL/DOGE/DOT +10 m√°s, leverage 1:20, 24/7
- √çndices: US30/NAS100/S&P500/DAX/FTSE/Nikkei, leverage 1:100
- Metales: Oro/Plata/Platino/Paladio/Cobre, leverage 1:100
- Acciones: AAPL/MSFT/GOOGL/AMZN/TSLA/META/NVDA, leverage 1:20

üí∞ CUENTAS:
- Demo: GRATIS, configurable hasta $1,000,000 virtuales, sin l√≠mite
- Real: M√≠nimo $50, m√°ximo $1,000,000 inicial
- Crear cuenta: Men√∫ > Cuentas > Nueva Cuenta

üí∏ DEP√ìSITOS Y RETIROS:
DEP√ìSITOS: Crypto instant 0% fee, Banco 0% fee (1-3 d√≠as), Tarjetas 2.5% fee instant
RETIROS: M√≠nimo $50, KYC obligatorio, 24-72h, fees: $25 banco, 2% tarjetas, red crypto
WALLET: Men√∫ > Wallet - gesti√≥n completa de fondos

‚úÖ VERIFICACI√ìN KYC:
Ubicaci√≥n: Configuraci√≥n > Verificaci√≥n KYC
Documentos: ID/Pasaporte + Comprobante domicilio + Selfie
Tiempo: 24-48 horas h√°biles
Sin KYC = No retiros

üéØ COPY TRADING Y PAMM:
COPY TRADING: Men√∫ > Inversor/Gestor, m√≠nimo $100, 50+ traders, 20% comisi√≥n
PAMM: Men√∫ > PAMM, m√≠nimo $100, lock 30 d√≠as, 20-30% comisi√≥n gestores
Ambos con an√°lisis completo, filtros avanzados, estad√≠sticas detalladas

üèÜ COMPETENCIAS Y CERTIFICADOS:
Ubicaci√≥n: Men√∫ > Competencias
100k Challenge, premios $5,000-$10,000
Leaderboard en tiempo real, certificados autom√°ticos
Sistema de medallas, rankings internacionales

üíé PROGRAMA AFILIADOS:
Ubicaci√≥n: Men√∫ > Afiliados
25% revenue share lifetime, CPA hasta $800
Sistema multi-nivel, pagos mensuales desde $100
Dashboard completo con estad√≠sticas

üì± PLATAFORMAS Y APPS:
MT5: Windows/Mac/iOS/Android - Men√∫ > Descargas
WebTrader sin descarga, app m√≥vil 100% funcional
API REST para trading algor√≠tmico

üîß M√ÅS HERRAMIENTAS:
HISTORIAL: Cuentas > Historial - todas las operaciones
NOTIFICACIONES: In-app y email configurables
CERTIFICADOS: Generaci√≥n autom√°tica al completar challenges
AN√ÅLISIS: Cada cuenta tiene an√°lisis detallado con gr√°ficos

üìç NAVEGACI√ìN R√ÅPIDA:
Dashboard > Home principal
Cuentas > Trading accounts y an√°lisis
Wallet > Dep√≥sitos y retiros
Herramientas > Calculadora de Pips
Noticias > Calendario econ√≥mico
Configuraci√≥n > KYC, 2FA, perfil

REGLAS DE RESPUESTA:
1. M√ÅXIMO 2-3 oraciones concisas
2. Datos exactos, no inventes
3. Si el mensaje no es sobre trading/AGM, redirige educadamente
4. Menciona riesgos cuando hables de trading
5. Si no sabes, sugiere contactar soporte
6. Var√≠a respuestas, no seas rob√≥tico
7. Detecta urgencia/frustraci√≥n y escala a humano

AN√ÅLISIS DEL MENSAJE:
- Es sobre trading/AGM: ${intent.category !== 'general' ? 'S√ç' : 'VERIFICAR'}
- Requiere respuesta: ${message.length > 3 ? 'S√ç' : 'NO'}

MENSAJE: "${message}"

RESPONDE solo si es relevante a AGM/trading, sino redirige educadamente:`;

      const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${this.GEMINI_MODEL}:generateContent`;
      
      const response = await fetch(`${GEMINI_API_URL}?key=${this.GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: systemContext
            }]
          }],
          generationConfig: {
            temperature: 0.9, // Alta creatividad para respuestas m√°s naturales y variadas
            topK: 50,
            topP: 0.95,
            maxOutputTokens: 250,
            candidateCount: 1,
            stopSequences: [] // Sin secuencias de parada para respuestas completas
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        logger.error('[ENHANCED_CHAT] Gemini API error:', errorData);
        throw new Error(`Gemini API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.candidates && data.candidates[0] && data.candidates[0].content) {
        let aiResponse = data.candidates[0].content.parts[0].text.trim();
        
        // Limpiar y limitar respuesta
        aiResponse = aiResponse.replace(/\*\*/g, '').replace(/\n\n+/g, ' ');
        if (aiResponse.length > 250) {
          // Cortar en la √∫ltima oraci√≥n completa antes de 250 caracteres
          const sentences = aiResponse.match(/[^.!?]+[.!?]+/g) || [aiResponse];
          let result = '';
          for (const sentence of sentences) {
            if ((result + sentence).length <= 250) {
              result += sentence;
            } else {
              break;
            }
          }
          aiResponse = result || sentences[0].substring(0, 247) + '...';
        }
        
        logger.info('[ENHANCED_CHAT] Gemini response generated successfully');
        return aiResponse;
      } else {
        throw new Error('Invalid response format from Gemini');
      }

    } catch (error) {
      logger.error('[ENHANCED_CHAT] Gemini error - usando fallback inteligente:', error.message);
      // Fallback a respuesta inteligente si Gemini falla
      logger.info('[ENHANCED_CHAT] Generando respuesta con sistema de fallback inteligente');
      return this.generateSmartFallbackResponse(message, intent, relevantKnowledge, userContext);
    }
  }

  // Generar respuesta con OpenAI GPT-4
  async generateOpenAIResponse(message, intent, userContext, relevantKnowledge) {
    try {
      // Construir contexto del sistema
      const systemPrompt = `Eres Flofy, el asistente oficial de Alpha Global Market (AGM).

CONTEXTO DEL USUARIO:
- Nombre: ${userContext.username}
- Autenticado: ${userContext.isAuthenticated ? 'S√≠' : 'No'}
- Estado KYC: ${userContext.kycStatus}
- Cuentas trading: ${userContext.accountCount}
- Balance wallet: $${userContext.walletBalance}

HISTORIAL DE CONVERSACI√ìN:
${conversationContext?.recent_messages?.slice(0, 5).map(m => 
  `${m.sender_type === 'user' ? 'Usuario' : 'Alpha'}: ${m.message.substring(0, 100)}`
).join('\n') || 'Primera interacci√≥n'}

INTENCI√ìN DETECTADA: ${intent.name} (categor√≠a: ${intent.category})

INFORMACI√ìN RELEVANTE DE AGM:
${relevantKnowledge.map(k => {
  if (k.type === 'faq') return `FAQ: ${k.content.question} - ${k.content.answer}`;
  if (k.type === 'troubleshooting') return `Problema: ${k.content.problem} - Soluciones: ${k.content.solutions.join(', ')}`;
  if (k.type === 'category_info') return `Informaci√≥n: ${JSON.stringify(k.data).substring(0, 500)}`;
  return '';
}).filter(Boolean).join('\n')}

REGLAS IMPORTANTES:
1. Respuestas concisas y espec√≠ficas (m√°x 200 caracteres idealmente)
2. Usa la informaci√≥n de la base de conocimientos
3. Si el usuario necesita hacer algo, da pasos espec√≠ficos
4. Si no sabes algo con certeza, sugiere contactar soporte humano
5. S√© amigable pero profesional
6. Si detectas frustraci√≥n o problema grave, ofrece asistencia humana
7. NUNCA inventes informaci√≥n que no est√© en la base de conocimientos
8. Siempre recuerda que el trading conlleva riesgos

Responde la siguiente pregunta del usuario:`;

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.OPENAI_API_KEY}`
        },
        body: JSON.stringify({
          model: 'gpt-4-turbo-preview',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: message }
          ],
          temperature: 0.7,
          max_tokens: 250,
          presence_penalty: 0.6,
          frequency_penalty: 0.3
        })
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status}`);
      }

      const data = await response.json();
      return data.choices[0].message.content.trim();
      
    } catch (error) {
      logger.error('[ENHANCED_CHAT] OpenAI error:', error);
      // Fallback a respuesta inteligente
      return this.generateSmartFallbackResponse(message, intent, relevantKnowledge, userContext);
    }
  }

  // Respuesta inteligente sin IA externa
  generateSmartFallbackResponse(message, intent, relevantKnowledge, userContext) {
    const responses = [];
    
    // Saludar si es necesario
    if (message.toLowerCase().match(/hola|buenos|buenas|hey|hi/)) {
      responses.push(`¬°Hola ${userContext.username}! `);
    }
    
    // Respuesta basada en intent principal
    switch (intent.name) {
      case 'crear_cuenta':
        if (!userContext.isAuthenticated) {
          responses.push("Para crear una cuenta, primero reg√≠strate en la plataforma. Luego ve a 'Cuentas de Trading' > 'Nueva Cuenta'.");
        } else if (userContext.accountCount === 0) {
          responses.push("Ve a 'Cuentas de Trading' > 'Nueva Cuenta'. Puedes crear una demo gratis o real desde $50.");
        } else {
          responses.push("Ya tienes cuentas activas. Ve a 'Cuentas de Trading' para crear adicionales.");
        }
        break;
        
      case 'deposito':
        if (!userContext.isAuthenticated) {
          responses.push("Necesitas una cuenta para depositar. Reg√≠strate primero en agm.com");
        } else if (userContext.kycStatus !== 'approved') {
          responses.push("Para depositar, ve a Wallet > Depositar. Acepta tarjetas, transferencias y crypto desde $50. Nota: KYC requerido para retiros.");
        } else {
          responses.push("Ve a Wallet > Depositar. M√©todos: transferencia bancaria, tarjetas (2.5% fee), crypto (sin fee). M√≠nimo $50.");
        }
        break;
        
      case 'retiro':
        if (userContext.kycStatus !== 'approved') {
          responses.push("‚ö†Ô∏è Necesitas verificaci√≥n KYC aprobada para retirar. Ve a Configuraci√≥n > Verificaci√≥n KYC.");
        } else {
          responses.push("Ve a Wallet > Retirar. M√≠nimo $50, procesamiento 24-72h. Aseg√∫rate de configurar tu m√©todo de retiro primero.");
        }
        break;
        
      case 'kyc':
        const kycInfo = AGM_KNOWLEDGE_BASE.accounts.verification.kyc;
        if (userContext.kycStatus === 'approved') {
          responses.push("‚úÖ Tu KYC ya est√° aprobado. Tienes acceso completo a retiros y todas las funciones.");
        } else if (userContext.kycStatus === 'pending') {
          responses.push("‚è≥ Tu KYC est√° en revisi√≥n. Proceso toma 24-48h h√°biles. Te notificaremos cuando est√© listo.");
        } else {
          responses.push(`Para verificar: ${kycInfo.process[0]}, ${kycInfo.process[1]}. Necesitas: ID + comprobante domicilio + selfie.`);
        }
        break;
        
      case 'trading':
        responses.push("Ofrecemos Forex (1:200), Crypto (1:20), √çndices y Materias Primas. Spreads desde 0.8 pips. ¬øQu√© instrumento te interesa?");
        break;
        
      case 'pamm':
        responses.push("PAMM permite invertir con gestores desde $100. Ve a secci√≥n PAMM, revisa estad√≠sticas de gestores y elige uno. Comisiones solo sobre ganancias.");
        break;
        
      case 'copy':
        responses.push("Copy Trading copia autom√°ticamente traders exitosos. M√≠nimo $100. Ve a Copy Trading, filtra por rendimiento y activa la copia.");
        break;
        
      case 'problema':
        // Buscar en troubleshooting
        if (relevantKnowledge.length > 0 && relevantKnowledge[0].type === 'troubleshooting') {
          const problem = relevantKnowledge[0].content;
          responses.push(`Para '${problem.problem}': ${problem.solutions[0]}. ¬øNecesitas m√°s ayuda?`);
        } else {
          responses.push("Entiendo que tienes un problema. ¬øPodr√≠as darme m√°s detalles? Tambi√©n puedo conectarte con soporte humano si prefieres.");
        }
        break;
        
      case 'plataforma':
        responses.push("Usamos MetaTrader 5. Descarga: Windows/Mac/iOS/Android. WebTrader disponible sin descarga. ¬øQu√© dispositivo usas?");
        break;
        
      default:
        // Buscar en FAQs
        if (relevantKnowledge.length > 0 && relevantKnowledge[0].type === 'faq') {
          responses.push(relevantKnowledge[0].content.answer);
        } else {
          // Respuesta gen√©rica
          responses.push("Puedo ayudarte con: cuentas, dep√≥sitos, retiros, KYC, trading, PAMM y copy trading. ¬øSobre qu√© necesitas informaci√≥n?");
        }
    }
    
    // Agregar sugerencias contextuales
    if (!userContext.isAuthenticated) {
      responses.push(" ¬øNecesitas crear una cuenta?");
    } else if (userContext.kycStatus !== 'approved' && intent.name !== 'kyc') {
      if (Math.random() > 0.7) { // 30% de probabilidad de sugerir KYC
        responses.push(" Recuerda verificar tu KYC para acceso completo.");
      }
    }
    
    return responses.join(' ').substring(0, 300); // Limitar longitud
  }

  // Procesar mensaje del usuario
  async processUserMessage(userId, message, userData = null) {
    try {
      logger.info('[CHAT] processUserMessage called with:', { userId, message: message.substring(0, 50) });
      
      if (!this.isInitialized) {
        await this.initialize();
      }

      const startTime = Date.now();
      
      // Obtener o crear conversaci√≥n en DB
      logger.info('[CHAT] About to call getOrCreateConversation in processUserMessage');
      const conversationId = await this.getOrCreateConversation(userId);
      
      // Verificar si la conversaci√≥n est√° bajo control humano
      const { data: conversationData, error: fetchError } = await supabase
        .from('chat_conversations')
        .select('is_human_controlled')
        .eq('id', conversationId)
        .single();
      
      const isHumanControlled = conversationData?.is_human_controlled || false;
      logger.info('[CHAT] Conversation control status:', { conversationId, isHumanControlled });
      
      // An√°lisis del mensaje
      const intent = this.analyzeIntent(message);
      
      // Guardar mensaje del usuario en historial local y DB
      this.addToHistory(userId, 'user', message);
      const userMessageId = await this.saveMessageToDB(conversationId, userId, 'user', message, intent.name);
      
      // Si est√° bajo control humano, no generar respuesta de IA
      if (isHumanControlled) {
        logger.info('[CHAT] Conversation is human-controlled, skipping AI response');
        
        // Guardar en localStorage para persistencia
        this.saveLocalHistory();
        
        return {
          success: true,
          response: null, // No response from AI when human-controlled
          intent: intent.name,
          isHumanControlled: true,
          conversationId,
          messageId: userMessageId,
          humanControlled: true,
          message: 'Un agente humano est√° atendiendo esta conversaci√≥n.'
        };
      }
      
      // Generar respuesta mejorada solo si no est√° bajo control humano
      const aiResponse = await this.generateEnhancedResponse(message, userData);
      
      // Guardar respuesta de IA en historial local y DB
      this.addToHistory(userId, 'flofy', aiResponse);
      const aiMessageId = await this.saveMessageToDB(conversationId, userId, 'ai', aiResponse, intent.name, {
        confidence: intent.score / 10, // Normalizar score a 0-1
        responseTime: Date.now() - startTime
      });
      
      // Guardar en localStorage para persistencia
      this.saveLocalHistory();
      
      return {
        success: true,
        response: aiResponse,
        intent: intent.name,
        isHumanControlled: false,
        conversationId,
        messageId: aiMessageId
      };

    } catch (error) {
      logger.error('[ENHANCED_CHAT] Error processing message:', error);
      return {
        success: false,
        error: error.message,
        response: 'Disculpa, hubo un error. ¬øPodr√≠as reformular tu pregunta o intentar m√°s tarde?'
      };
    }
  }

  // Gesti√≥n del historial de conversaci√≥n
  addToHistory(userId, sender, message) {
    if (!this.conversationHistory.has(userId)) {
      this.conversationHistory.set(userId, []);
    }
    
    const history = this.conversationHistory.get(userId);
    history.push({
      id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      sender,
      message,
      timestamp: new Date().toISOString()
    });
    
    // Limitar historial a √∫ltimos 50 mensajes
    if (history.length > 50) {
      history.shift();
    }
  }

  getRecentHistory(userId, limit = 10) {
    const history = this.conversationHistory.get(userId) || [];
    return history.slice(-limit);
  }

  // Persistencia local
  saveLocalHistory() {
    try {
      const historyData = Array.from(this.conversationHistory.entries());
      localStorage.setItem('agm_chat_history', JSON.stringify(historyData));
    } catch (error) {
      logger.error('[ENHANCED_CHAT] Error saving history:', error);
    }
  }

  loadLocalHistory() {
    try {
      const saved = localStorage.getItem('agm_chat_history');
      if (saved) {
        const historyData = JSON.parse(saved);
        this.conversationHistory = new Map(historyData);
      }
    } catch (error) {
      logger.error('[ENHANCED_CHAT] Error loading history:', error);
    }
  }

  // Obtener historial de conversaci√≥n
  async getConversationHistory(userId, limit = 50) {
    const history = this.conversationHistory.get(userId) || [];
    return {
      success: true,
      messages: history.slice(-limit)
    };
  }

  // Limpiar historial
  clearHistory(userId) {
    this.conversationHistory.delete(userId);
    this.saveLocalHistory();
  }

  // Verificar control humano (placeholder)
  async checkHumanControl(userId) {
    // Por ahora siempre retorna false
    return false;
  }

  // Toggle control humano (placeholder)
  async toggleHumanControl(userId, isHumanControlled) {
    return { success: true };
  }

  // Obtener o crear conversaci√≥n en Supabase
  async getOrCreateConversation(userId) {
    try {
      logger.info('[CHAT] getOrCreateConversation called for user:', userId);
      
      // Verificar cache primero
      if (this.conversationIdCache.has(userId)) {
        const cachedId = this.conversationIdCache.get(userId);
        logger.info('[CHAT] Using cached conversation ID:', cachedId);
        return cachedId;
      }

      // Buscar conversaci√≥n activa existente
      const { data: existingConversations, error: fetchError } = await supabase
        .from('chat_conversations')
        .select('id')
        .eq('user_id', userId)
        .eq('status', 'active')
        .order('last_activity', { ascending: false })
        .limit(1);

      if (existingConversations && existingConversations.length > 0 && !fetchError) {
        logger.info('[CHAT] Found existing conversation:', existingConversations[0].id);
        this.conversationIdCache.set(userId, existingConversations[0].id);
        return existingConversations[0].id;
      }
      
      logger.info('[CHAT] No existing conversation found, creating new one...');

      // Generar session_id √∫nico
      const sessionId = `web_${userId}_${Date.now()}`;

      // Crear nueva conversaci√≥n
      const { data: newConversation, error: createError } = await supabase
        .from('chat_conversations')
        .insert({
          user_id: userId,
          session_id: sessionId,
          status: 'active',
          metadata: {
            channel: 'web',
            userAgent: navigator.userAgent,
            timestamp: new Date().toISOString()
          }
        })
        .select('id')
        .single();

      if (createError) {
        logger.error('[CHAT] Error creating conversation:', createError);
        throw createError;
      }

      logger.info('[CHAT] New conversation created:', newConversation.id);
      this.conversationIdCache.set(userId, newConversation.id);
      return newConversation.id;
    } catch (error) {
      logger.error('[CHAT] Error in getOrCreateConversation:', error);
      // Fallback: generar un UUID local si falla DB
      const fallbackId = `local_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      this.conversationIdCache.set(userId, fallbackId);
      return fallbackId;
    }
  }

  // Guardar mensaje en base de datos
  async saveMessageToDB(conversationId, userId, senderType, message, intent, metadata = {}) {
    try {
      // No guardar si es una conversaci√≥n local (fallback)
      if (conversationId.startsWith('local_')) {
        return `local_msg_${Date.now()}`;
      }

      // Mapear sender types correctamente
      const validSenderType = senderType === 'flofy' ? 'ai' : senderType;
      
      const { data, error } = await supabase
        .from('chat_messages')
        .insert({
          conversation_id: conversationId,
          sender_type: validSenderType,
          sender_id: senderType === 'user' ? userId : null,
          sender_name: senderType === 'ai' ? 'Alpha AI' : null,
          message: message,
          intent: intent,
          metadata: {
            ...metadata,
            timestamp: new Date().toISOString()
          }
        })
        .select('id')
        .single();

      if (error) {
        logger.error('[CHAT] Error saving message to DB:', error);
        return `error_msg_${Date.now()}`;
      }

      // Actualizar last_activity de la conversaci√≥n
      await supabase
        .from('chat_conversations')
        .update({ 
          last_activity: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .eq('id', conversationId);

      return data.id;
    } catch (error) {
      logger.error('[CHAT] Error in saveMessageToDB:', error);
      return `error_msg_${Date.now()}`;
    }
  }

  // Obtener ID de conversaci√≥n actual
  getCurrentConversationId(userId) {
    return this.conversationIdCache.get(userId) || null;
  }
}

// Export singleton instance
export const enhancedChatService = new EnhancedChatService();
export default enhancedChatService;